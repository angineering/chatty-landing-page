{"version":3,"sources":["static/images/logo.png","static/images/chatty-screenshot.png","Main.js","Contact.js","Privacy.js","Terms.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Main","className","href","alt","height","src","srcset","Screenshot","Component","Contact","Privacy","Terms","App","Navbar","variant","expand","fixed","Brand","Logo","width","path","to","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,+C,iQCItBC,E,uKAEjB,OACE,4BAAQC,UAAU,cAChB,6BACA,8DACA,mIAIA,6BACA,uBAAGC,KAAK,oJAAmJ,yBAAKC,IAAI,eAAeC,OAAO,KAAKC,IAAI,uDAAuDC,OAAO,0HAEjQ,6BACE,yBAAKL,UAAU,aAAaI,IAAME,IAAaJ,IAAI,mC,GAd3BK,aCFbC,E,uKAEjB,OACE,yBAAKR,UAAU,QACb,uCAEA,iCACE,uCACA,qIAEkC,uBAAGC,KAAK,4BAAR,uBAIpC,iCACE,wCACA,4HAEkC,uBAAGA,KAAK,6BAAR,6B,GAlBPM,aCAhBE,E,uKAEjB,OACE,yBAAKT,UAAU,QACb,8CACA,2DACA,6HAGA,8DACA,2NAGA,kLAGA,kPAGA,iKAGA,6IAGA,2CACA,6EAGA,gEACA,ieAGA,8DACA,yGAGA,0CACA,2GAC4E,uBAAGC,KAAK,qBAAR,2B,GAvC/CM,aCAhBG,E,uKAEjB,OACE,yBAAKV,UAAU,QACb,kDACA,0DACA,uIAGA,8LAKA,+H,GAd2BO,aC2DpBI,MA7Cf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKX,UAAU,OACb,kBAACY,EAAA,EAAD,CAAQC,QAAQ,OAAOC,OAAO,KAAKd,UAAU,aAAae,MAAM,OAC9D,kBAACH,EAAA,EAAOI,MAAR,CAAcf,KAAK,KACjB,yBACEC,IAAI,OACJE,IAAKa,IACLC,MAAM,KACNf,OAAO,KACPH,UAAU,6BACT,IAPL,WAaF,8BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmB,KAAK,YACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,YACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,SAIN,gCACI,kBAAC,IAAD,CAAMC,GAAG,WAAT,WACA,kBAAC,IAAD,CAAMA,GAAG,WAAT,kBACA,kBAAC,IAAD,CAAMA,GAAG,SAAT,sBACA,2DC1CQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4601345c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.e11076db.png\";","module.exports = __webpack_public_path__ + \"static/media/chatty-screenshot.b2926cc7.png\";","import React, { Component } from 'react'\nimport Screenshot from './static/images/chatty-screenshot.png'\n\n\nexport default class Main extends Component {\n  render() {\n    return (\n      <header className=\"App-header\">\n        <div>\n        <h1>Stay on top of your networking</h1>\n        <h4>\n          Keep track of how many colleagues you've spoken to lately,\n          and who it's time to reach out to again.\n        </h4>\n        <br></br>\n        <a href=\"https://slack.com/oauth/v2/authorize?client_id=1052632707317.1057131634261&scope=chat:write,files:write,users:read&user_scope=im:history,im:read\"><img alt=\"Add to Slack\" height=\"45\" src=\"https://platform.slack-edge.com/img/add_to_slack.png\" srcset=\"https://platform.slack-edge.com/img/add_to_slack.png 1x, https://platform.slack-edge.com/img/add_to_slack@2x.png 2x\"/></a>\n        </div>\n        <div>\n          <img className=\"screenshot\" src={ Screenshot } alt=\"screenshot of Chatty app\" />\n        </div>\n      </header>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class Contact extends Component {\n  render() {\n    return (\n      <div className=\"page\">\n        <h1>Contact</h1>\n\n        <section>\n          <h2>Support</h2>\n          <p>\n            If you have feedback, suggestions or issues with the Chatty Slack App,\n            please email the Chatty team on <a href='mailto:help@bechatty.app'>help@bechatty.app</a>\n          </p>\n        </section>\n\n        <section>\n          <h2>Feedback</h2>\n          <p>\n            If you have feedback or suggestions for the Chatty Slack App,\n            please email the Chatty team on <a href='mailto:hello@bechatty.app'>hello@bechatty.app</a>\n          </p>\n        </section>\n\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class Privacy extends Component {\n  render() {\n    return (\n      <div className=\"page\">\n        <h1>Privacy Policy</h1>\n        <p>Last modified: 12 March 2020</p>\n        <p>\n          Thank you for using Chatty. This policy explains how we handle your personal data and privacy.\n        </p>\n        <h2>Information collection and use</h2>\n        <p>\n          Chatty only uses your approved Slack data to give you an insight into who you've spoken to recently and who you should reach out to, to help you improve your network inside your workspace. \n        </p>\n        <p>\n          Chatty requests access to see who the members of your workspace are, so it can give you an overview of who you have and haven't spoken to recently.\n        </p>\n        <p>\n          Chatty requests access to your Slack Direct Messages solely for the purpose of seeing when the last message was exchanged with a member of your workspace. We never look at or store the content of those messages.\n        </p>\n        <p>\n          Your user token is securely stored in our database. It is linked to your slack user ID. Your name is not recorded in our database.\n        </p>\n        <p>\n          If you decide to stop using Chatty and revoke access, your user information will be deleted from our database.\n        </p>\n        <h2>3rd Parties</h2>\n        <p>\n          We do not pass your data onto any 3rd parties.\n        </p>\n        <h2>Revisions to this Privacy Policy</h2>\n        <p>\n          We reserve the right to revise this Privacy Policy from time to time. We will post changes on this page and indicate the “last modified” date at the top of this page. Please check back often for any updates. You acknowledge and agree that it is your responsibility to review this Privacy Policy periodically, and that your continued use of our Services after any change in this Privacy Policy will constitute your acceptance of such change.\n        </p>\n        <h2>Your Acceptance of These Terms</h2>\n        <p>\n          By using our Services, you signify your acceptance of this Privacy Policy.\n        </p>\n        <h2>Contact Us</h2>\n        <p>\n          If you have any questions about this Privacy Policy, please contact us at <a href=\"help@bechatty.app\">help@bechatty.app</a>\n        </p>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class Terms extends Component {\n  render() {\n    return (\n      <div className=\"page\">\n        <h1>Terms & Conditions</h1>\n        <p>Last updated: 16 April 2020</p>\n        <p>\n          By installing the Chatty app you agree to the following terms of service, as well as the privacy policy.\n        </p>\n        <p>\n          You will not use the service in any unlawful way.\n          This includes but is not limited to attempts to hack,\n          social engineer or in other ways get hold of user data.\n        </p>\n        <p>\n          You will not impersonate Chatty or make any clones or copies of it or its logo or branding.\n        </p>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport Logo from './static/images/logo.png';\nimport './App.css';\nimport { Navbar } from 'react-bootstrap'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport Main from './Main'\nimport Contact from './Contact'\nimport Privacy from './Privacy'\nimport Terms from './Terms'\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar variant=\"dark\" expand=\"lg\" className=\"App-navbar\" fixed=\"top\">\n          <Navbar.Brand href=\"/\">\n            <img\n              alt=\"logo\"\n              src={Logo}\n              width=\"30\"\n              height=\"30\"\n              className=\"d-inline-block align-top\"\n            />{' '}\n            Chatty\n          </Navbar.Brand>\n        </Navbar>\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <main>\n          <Switch>\n            <Route path=\"/privacy\">\n              <Privacy />\n            </Route>\n            <Route path=\"/terms\">\n              <Terms />\n            </Route>\n            <Route path=\"/contact\">\n              <Contact />\n            </Route>\n            <Route path=\"/\">\n              <Main />\n            </Route>\n          </Switch>\n        </main>\n        <footer>\n            <Link to='contact'>Contact</Link>\n            <Link to='privacy'>Privacy Policy</Link>\n            <Link to='terms'>Terms & Conditions</Link>\n            <p>&copy; Angela Branaes 2020</p>\n        </footer>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}